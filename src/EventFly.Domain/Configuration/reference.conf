####################################################
#         EventFly  Default Config File         #
####################################################

# This is the reference config file that contains all the
# default settings for EventFly and the descriptions of each.
# Make your edits/overrides in your applications hocon config

EventFly {

	# the verion of the config file
	version = "0.1.0"

	# on actor/entity instantiation
	# EventFly will log irregularities
	# as warnings for you to see in the console
	log-configuration-warnings = on

	aggregate-manager {

		# subscribes aggregate managers
		# to deadletters on the event stream
		# turning it off will result in no 
		# deadletters being sent to aggregate
		# managers
		handle-deadletters = on

		# the aggregate manager will automatically
		# create the aggregate root 
		# actor supervised by the aggregate manager
		# 
		auto-dispatch-on-receive = on
	}

	aggregate-root {
	
		# aggregate root will use default
		# recover method handlers for events.
		# turn this off if you want to register 
		# your own recover method handler to apply
		# events from your event journal
		use-default-event-recover = on

		# aggregate root will use default
		# recover method handlers for snapshots
		# turn this off if you want to register 
		# your own recover method handler to make
		# the snapshot into your internal state
		use-default-snapshot-recover = on
		
		# aggregate root will use this value
		# of set receive timeout to auto-
		# matically shut down the aggregate
		# root actor. This will essentially
		# free up the memory footprint which
		# the inactive actor is taking up.
		set-receive-timeout = 5m
	}

	aggregate-saga-manager {

		# subscribes the aggregate saga manager
		# to the domain models that are published
		# on event stream, implementing ISagaIsStartedBy<,,>
		# and ISagaHandles<,,> tells the aggregate saga manager
		# which events to subscribe to that are being published
		auto-subscribe = on

		# aggregate saga manager will register a handler for incoming
		# domain events to the stanard akka.net receive handler
		# list. The handlers will be invoke from the methods
		# that implement the ISagaHandles<,,> and ISagaIsStartedBy<,,>.
		# The manager will spawn a child saga if it does not exist
		# and it will forward the event to the child saga
		# the child saga will be created and addressed by resolving
		# its name from the saga locator.		
		auto-spawn-on-receive = on
	}

	
	domain-service-manager {

		auto-subscribe = on
	
		auto-spawn-on-receive = on
	}

	domain-service {
	
		auto-receive = on
	}
	
	aggregate-saga {
	
		# aggregate saga will automatically
		# register the event handler methods
		# to akka.net commandasync handlers.
		auto-receive = on
	    
    	# aggregate saga will use default
		# recover method handlers for events.
		# turn this off if you want to register 
		# your own recover method handler to apply
		# events from your sagas event journal
		use-default-event-recover = on

		# aggregate saga will use default
		# recover method handlers for snapshots
		# turn this off if you want to register 
		# your own recover method handler to make
		# the snapshot into your internal state
		use-default-snapshot-recover = on
	}

	domain-event-subscriber {

		# subscribes the domain event subscriber
		# to the domain events that are published
		# on event stream. Implementing ISubscribeTo<,,>
		# tells the domain event subscriber which events
		# to subscribe to.
		auto-subscribe = on

		# subscriber will register a handler for incoming
		# domain events to the stanard akka.net receive handler
		# list. The handlers will be taken from the methods
		# that implement the ISubscribeTo<,,>
		auto-receive = on
	}
	
	job-scheduler {
    
    	# Persistent identifier for event stream produced by correlated reminder.
    	persistence-id = "scheduled-job"
    
    	# Identifier of a event journal used by correlated reminder.
    	journal-plugin-id = "akka.persistence.journal.inmem"
    
    	# Identifer of a snapshot store used by correlated reminder.
    	snapshot-plugin-id = "akka.persistence.snapshot-store.inmem"
    
    	# Unlike standard akka.net scheduler, reminders work in much lower frequency.
    	# Reason for this is that they are designed for a long running tasks (think of
    	# minutes, hours, days or weeks).
    	tick-interval = 10s
    }

}

akka.persistence.journal.inmem {

    event-adapters {
        
        aggregate-event-tagger  = ""EventFly.Events.AggregateEventTagger, EventFly""
    
    }
    
    event-adapter-bindings = {
    
        ""System.Object"" = aggregate-event-tagger
    
    }
}
